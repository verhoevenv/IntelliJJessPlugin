{
    parserClass="com.github.verhoevenv.intellij.jess.parser.JessParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Jess"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.verhoevenv.intellij.jess.psi"
    psiImplPackage="com.github.verhoevenv.intellij.jess.psi.impl"

    elementTypeHolderClass="com.github.verhoevenv.intellij.jess.psi.JessTypes"
    elementTypeClass="com.github.verhoevenv.intellij.jess.psi.JessElementType"
    tokenTypeClass="com.github.verhoevenv.intellij.jess.psi.JessTokenType"

    LP = "("
    RP = ")"
    DEFRULE = "defrule"
    DEFMODULE = "defmodule"
    DEFTEMPLATE = "deftemplate"
    DEFFACTS = "deffacts"
    DEFCLASS = "defclass"
    IMPORT = "import"
    SLOT = "slot"
    ARROW = "=>"
    AMP = "&"
    PIPE = "|"
    COLON = ":"
}

jessFile ::= form*
form ::= (rule|construct|function|COMMENT)
rule ::= LP DEFRULE rulehead ARROW rulebody RP

rulehead ::= rulename ruleconditional*
rulename ::= SYMBOL
ruleconditional ::= rulepattern
rulepattern ::= LP rulefactname ruleslot* RP
rulefactname ::= SYMBOL
ruleslot ::= LP slotname valuetest RP

valuetest ::= extendedsymbolicparenmatched*

extendedsymbolicparenmatched ::= ((LP extendedsymbolicparenmatched RP)|multiplesymbols)
multiplesymbols ::= extendedsymbolic+
extendedsymbolic ::= (SYMBOL|AMP|COLON|PIPE|literal|function)
/*
valuetest ::= (nonrecursivevaluetest|andconstraint|orconstraint)
nonrecursivevaluetest ::= (literal|variable|predicateconstraint)
predicateconstraint ::= COLON function
andconstraint ::= nonrecursivevaluetest AMP valuetest
orconstraint ::= nonrecursivevaluetest PIPE valuetest
*/

rulebody ::= ruleaction*
ruleaction ::= function
function ::= LP functionname functionargument* RP
functionname ::= SYMBOL
functionargument ::= (literal|variable|function)

construct ::= (moduleconstruct|templateconstruct|factsconstruct|classconstruct)

moduleconstruct ::= LP DEFMODULE SYMBOL+ RP

templateconstruct ::= LP DEFTEMPLATE templatename templateslot* RP
templatename ::= SYMBOL
templateslot ::= LP SLOT slotname RP
slotname ::= SYMBOL

factsconstruct ::= LP DEFFACTS factdbname fact* RP
factdbname ::= SYMBOL
fact ::= LP SYMBOL factslot* RP
factslot ::= LP slotname literal RP

classconstruct ::= LP DEFCLASS SYMBOL+ RP

literal ::= STRING_LITERAL
variable ::= SYMBOL
